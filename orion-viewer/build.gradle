apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: '../project.gradle'

project.ext {
    Properties properties = new Properties()
    def propertiesFile = file('version.properties')
    properties.load(propertiesFile.newDataInputStream())
    orionVersionCode = properties.getProperty("orion.version.code").toInteger()
    orionVersionName = properties.getProperty("orion.version.name")
    doSigning = file("signing.gradle").exists()
    println "do signing: " + doSigning
    if (doSigning) {
        apply from: 'signing.gradle'
    }
    ext.abiCodes = ['armeabi-v7a':1, x86:2, x86_64:3, 'arm64-v8a':4]
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    //tab layout
    implementation 'com.google.android.material:material:1.11.0'
//    implementation project(':tree-view-list-android')


    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
//    implementation project(":nativeLibs:djvuModule")
    implementation project(":nativeLibs:mupdfModule")
    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.7'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.7'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.5'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    //MPP test workaround
    implementation project(":common")
}

android {
    if (orionNdkVersion != null) {
        ndkVersion orionNdkVersion
    }
    compileSdkVersion = orionCompileSdk
    buildToolsVersion = orionBuildToolsVersion

    def githubBuildNumber = (System.getenv("GITHUB_RUN_NUMBER") ?: "1").toInteger()

    defaultConfig {
        vectorDrawables.useSupportLibrary = true

        versionCode = orionVersionCode
        versionName = orionVersionName

        resValue "string", "versionName", versionName

        minSdkVersion orionMinSdk
        if (isAndroid40Build) {
            maxSdkVersion = 15
        }
        targetSdkVersion orionTargetSdk


        applicationId "universe.constellation.orion.viewer"
        testApplicationId "universe.constellation.orion.viewer.test"
        testInstrumentationRunner "universe.constellation.orion.viewer.test.framework.Runner"
        if (isCIBuild) {
            archivesBaseName = "orion-viewer-$versionName-$githubBuildNumber"
        } else {
            archivesBaseName = "orion-viewer-$versionName" + (isAndroid40Build ? "-android40" : "")
        }
    }

    sourceSets {
        main {
            java {
                srcDirs += "../nativeLibs/mupdf/platform/java/src"

                if (onyxSdkPath != null) {
                    srcDirs += onyxSdkPath + "/src/main/java/"
                }
            }
            assets.srcDirs += '../nativeLibs/djvu/share/djvu'
        }

        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
            assets.srcDirs += 'src/androidTest/assets'
        }
    }

    buildTypes {
        release {
            if (doSigning) {
                signingConfig signingConfigs.release
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            def api = System.getenv("EMULATOR_API")
            if (api == null || api.toInteger() >= 23) {
                adbOptions {
                    installOptions  '-r'
                }
            }
            multiDexEnabled = true
            multiDexKeepProguard file('multiDexKeep.pro')
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    splits {
        abi {
            enable true
            universalApk false
            reset()
            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
            if (isAndroid40Build) {
                include "armeabi"
                exclude "x86_64"
            }
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/main.kotlin_module']
        }
    }

    // make per-variant version code
    android.applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def filter = output.getFilter(com.android.build.OutputFile.ABI)
            if (project.ext.abiCodes.get(filter)!= null) {
                output.versionCodeOverride = project.ext.abiCodes.get(filter) + variant.versionCode
                println "New version code for " + variant.buildType.name + "/" + filter + " is " + output.versionCodeOverride
            }
        }
    }


    namespace 'universe.constellation.orion.viewer'
    lint {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        buildConfig true
    }
}


tasks.register('downloadTestFiles') {
    doFirst {
        testFiles.forEach {
            def name = it.tokenize('/').last()
            def fileName = project.rootDir.path + "/orion-viewer/src/androidTest/assets/testData/" + name
            def file = new File(fileName)
            if (!file.exists()) {
                println "Downloading " + it + " into " + file.absolutePath
                new URL(it).withInputStream { i -> file.withOutputStream { it << i } }
            }
        }
    }
}


// Tests routine
def testDir = "/sdcard/Download/orion"
def screenShotDir = "$testDir/failures"
def localScreenShotDir = getLayout().getBuildDirectory().get().toString() + "/failures"

tasks.register('uploadTestData') {
    doLast {
        exec {
            commandLine(androidComponents.sdkComponents.adb.get(), "push", "--sync", "src/androidTest/assets/.", testDir)
        }
    }
}

def forwardLogcat = tasks.register("forwardLogcat") {
    //TODO support logcat redirection on Mac
    if (System.getProperty("os.name").toLowerCase().contains("linux")) {
        doLast {
            exec {
                executable("../utils/adbrun.sh")
                args(androidComponents.sdkComponents.adb.get())
            }
        }
    }

}

def createScreenshotDirectoryTask = tasks.register('createScreenshotDirectory') {
    doFirst {
        exec {
            commandLine(androidComponents.sdkComponents.adb.get(), "shell", "mkdir", "-p", screenShotDir)
        }
    }

}

def fetchScreenshotsTask = tasks.register('fetchScreenshots') {
    doLast {
        exec {
            commandLine("mkdir", "-p",  localScreenShotDir)
        }
        exec {
            commandLine(androidComponents.sdkComponents.adb.get(), "pull",  screenShotDir + "/.", localScreenShotDir)
        }
    }

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(screenShotDir).mkdirs()
    }
}

afterEvaluate {
    connectedDebugAndroidTest.dependsOn 'uploadTestData'
    connectedDebugAndroidTest.finalizedBy fetchScreenshotsTask
}

task('prepareRelease', type: Copy) {
    from('build/outputs/apk/release') {
        include '*'
    }
    from('build/outputs/native-debug-symbols/release') {
        include '*'
    }
    from('build/outputs/mapping/release') {
        include '*'
    }

    into "../../releases/${project.ext.orionVersionName}${if (isAndroid40Build) "_4" else ""}"

    dependsOn {
        assembleRelease
    }
}